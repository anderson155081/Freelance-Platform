# docker-compose.dev.yml (開發環境)
version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - FAST_REFRESH=true
      - REACT_APP_API_URL=http://localhost:8080/api
    stdin_open: true
    tty: true

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/app
    environment:
      - APP_ENV=development
      - DB_HOST=db
      - REDIS_HOST=redis
      - GIN_MODE=debug
    env_file:
      - .env.dev
    depends_on:
      - db
      - redis
    stdin_open: true
    tty: true

  db:
    image: postgres:17.5-alpine
    platform: linux/arm64/v8
    environment:
      - POSTGRES_DB=freelance_platform_dev
      - POSTGRES_USER=dev_user
      - POSTGRES_PASSWORD=dev_password
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"

  redis:
    image: redis:8.0.1-alpine
    platform: linux/arm64/v8
    command: redis-server --appendonly yes
    volumes:
      - redis_dev_data:/data
    ports:
      - "6379:6379"

  # 開發時的資料庫管理工具
  adminer:
    image: adminer:latest
    platform: linux/arm64/v8
    ports:
      - "8081:8080"
    depends_on:
      - db

  # Redis 管理工具 - 使用支援多平台的替代方案
  redis-commander:
    image: ghcr.io/joeferner/redis-commander:latest
    platform: linux/arm64/v8
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin
    ports:
      - "8082:8081"
    depends_on:
      - redis

volumes:
  postgres_dev_data:
  redis_dev_data: